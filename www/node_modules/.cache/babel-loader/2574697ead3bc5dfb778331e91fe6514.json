{"remainingRequest":"C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\src\\js\\libs\\UnrealBloomPass.js","dependencies":[{"path":"C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\src\\js\\libs\\UnrealBloomPass.js","mtime":1584631036000},{"path":"C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Meng Yin\\Desktop\\COVID-19-Visualization-master\\www\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Meng Yin/Desktop/COVID-19-Visualization-master/www/src/js/libs/UnrealBloomPass.js"],"names":["THREE","UnrealBloomPass","resolution","strength","radius","threshold","Pass","call","undefined","Vector2","x","y","clearColor","Color","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","WebGLRenderTarget","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","LuminosityHighPassShader","console","error","highPassShader","highPassUniforms","UniformsUtils","clone","uniforms","value","materialHighPassFilter","ShaderMaterial","vertexShader","fragmentShader","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","Vector3","CopyShader","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","enabled","needsSwap","oldClearColor","oldClearAlpha","basic","MeshBasicMaterial","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","context","disable","STENCIL_TEST","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","enable","kernelRadius"],"mappings":"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","sourcesContent":["// https://github.com/mrdoob/three.js/issues/14104\n\n/**\n * @author spidersharma / http://eduperiment.com/\n *\n * Inspired from Unreal Engine\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nimport * as THREE from \"three\";\nimport  \"./CopyShader\";\nimport  \"./ShaderPass\";\nimport  \"./LuminosityHighPassShader\";\n\nTHREE.UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n  THREE.Pass.call( this );\n  \n  this.strength = ( strength !== undefined ) ? strength : 1;\n  this.radius = radius;\n  this.threshold = threshold;\n  this.resolution = ( resolution !== undefined ) ? new THREE.Vector2( resolution.x, resolution.y ) : new THREE.Vector2( 256, 256 );\n  \n  // create color only once here, reuse it later inside the render function\n  this.clearColor = new THREE.Color( 0, 0, 0 );\n  \n  // render targets\n  let pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };\n  this.renderTargetsHorizontal = [];\n  this.renderTargetsVertical = [];\n  this.nMips = 5;\n  let resx = Math.round( this.resolution.x / 2 );\n  let resy = Math.round( this.resolution.y / 2 );\n  \n  this.renderTargetBright = new THREE.WebGLRenderTarget( resx, resy, pars );\n  this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n  this.renderTargetBright.texture.generateMipmaps = false;\n  \n  for ( let i = 0; i < this.nMips; i ++ ) {\n  \n    let renderTargetHorizonal = new THREE.WebGLRenderTarget( resx, resy, pars );\n  \n    renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n    renderTargetHorizonal.texture.generateMipmaps = false;\n  \n    this.renderTargetsHorizontal.push( renderTargetHorizonal );\n  \n    let renderTargetVertical = new THREE.WebGLRenderTarget( resx, resy, pars );\n  \n    renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n    renderTargetVertical.texture.generateMipmaps = false;\n  \n    this.renderTargetsVertical.push( renderTargetVertical );\n  \n    resx = Math.round( resx / 2 );\n  \n    resy = Math.round( resy / 2 );\n  \n  }\n  \n  // luminosity high pass material\n\n  if ( THREE.LuminosityHighPassShader === undefined )\n    console.error( \"THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader\" );\n  \n  let highPassShader = THREE.LuminosityHighPassShader;\n  this.highPassUniforms = THREE.UniformsUtils.clone( highPassShader.uniforms );\n  \n  this.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n  this.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n  \n  this.materialHighPassFilter = new THREE.ShaderMaterial( {\n    uniforms: this.highPassUniforms,\n    vertexShader: highPassShader.vertexShader,\n    fragmentShader: highPassShader.fragmentShader,\n    defines: {}\n  } );\n  \n  // Gaussian Blur Materials\n  this.separableBlurMaterials = [];\n  let kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n  resx = Math.round( this.resolution.x / 2 );\n  resy = Math.round( this.resolution.y / 2 );\n  \n  for ( let i = 0; i < this.nMips; i ++ ) {\n  \n    this.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n  \n    this.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new THREE.Vector2( resx, resy );\n  \n    resx = Math.round( resx / 2 );\n  \n    resy = Math.round( resy / 2 );\n  \n  }\n  \n  // Composite material\n  this.compositeMaterial = this.getCompositeMaterial( this.nMips );\n  this.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n  this.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n  this.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n  this.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n  this.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n  this.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n  this.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n  this.compositeMaterial.needsUpdate = true;\n  \n  let bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n  this.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n  this.bloomTintColors = [ new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ),\n         new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ) ];\n  this.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n  \n  // copy material\n  if ( THREE.CopyShader === undefined ) {\n  \n    console.error( \"THREE.BloomPass relies on THREE.CopyShader\" );\n  \n  }\n  \n  let copyShader = THREE.CopyShader;\n  \n  this.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );\n  this.copyUniforms[ \"opacity\" ].value = 1.0;\n  \n  this.materialCopy = new THREE.ShaderMaterial( {\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: THREE.AdditiveBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  } );\n  \n  this.enabled = true;\n  this.needsSwap = false;\n  \n  this.oldClearColor = new THREE.Color();\n  this.oldClearAlpha = 1;\n  \n  this.basic = new THREE.MeshBasicMaterial();\n  \n  this.fsQuad = new THREE.Pass.FullScreenQuad( null );\n  \n  };\n  \n  THREE.UnrealBloomPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\n  \n  constructor: THREE.UnrealBloomPass,\n  \n  dispose: function () {\n  \n    for ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n  \n    this.renderTargetsHorizontal[ i ].dispose();\n  \n    }\n  \n    for ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n  \n    this.renderTargetsVertical[ i ].dispose();\n  \n    }\n  \n    this.renderTargetBright.dispose();\n  \n  },\n  \n  setSize: function ( width, height ) {\n  \n    let resx = Math.round( width / 2 );\n    let resy = Math.round( height / 2 );\n  \n    this.renderTargetBright.setSize( resx, resy );\n  \n    for ( let i = 0; i < this.nMips; i ++ ) {\n  \n    this.renderTargetsHorizontal[ i ].setSize( resx, resy );\n    this.renderTargetsVertical[ i ].setSize( resx, resy );\n  \n    this.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new THREE.Vector2( resx, resy );\n  \n    resx = Math.round( resx / 2 );\n    resy = Math.round( resy / 2 );\n  \n    }\n  \n  },\n  \n  render: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n  \n    this.oldClearColor.copy( renderer.getClearColor() );\n    this.oldClearAlpha = renderer.getClearAlpha();\n    let oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n  \n    renderer.setClearColor( this.clearColor, 0 );\n  \n    if ( maskActive ) renderer.context.disable( renderer.context.STENCIL_TEST );\n  \n    // Render input to screen\n  \n    if ( this.renderToScreen ) {\n  \n    this.fsQuad.material = this.basic;\n    this.basic.map = readBuffer.texture;\n  \n    renderer.setRenderTarget( null );\n    renderer.clear();\n    this.fsQuad.render( renderer );\n  \n    }\n  \n    // 1. Extract Bright Areas\n  \n    this.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n    this.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n  \n    renderer.setRenderTarget( this.renderTargetBright );\n    renderer.clear();\n    this.fsQuad.render( renderer );\n  \n    // 2. Blur All the mips progressively\n  \n    let inputRenderTarget = this.renderTargetBright;\n  \n    for ( let i = 0; i < this.nMips; i ++ ) {\n  \n    this.fsQuad.material = this.separableBlurMaterials[ i ];\n  \n    this.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n    this.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = THREE.UnrealBloomPass.BlurDirectionX;\n    renderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n    renderer.clear();\n    this.fsQuad.render( renderer );\n  \n    this.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n    this.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = THREE.UnrealBloomPass.BlurDirectionY;\n    renderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n    renderer.clear();\n    this.fsQuad.render( renderer );\n  \n    inputRenderTarget = this.renderTargetsVertical[ i ];\n  \n    }\n  \n    // Composite All the mips\n  \n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n    this.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n    this.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n  \n    renderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n    renderer.clear();\n    this.fsQuad.render( renderer );\n  \n    // Blend it additively over the input texture\n  \n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n  \n    if ( maskActive ) renderer.context.enable( renderer.context.STENCIL_TEST );\n  \n  \n    if ( this.renderToScreen ) {\n  \n    renderer.setRenderTarget( null );\n    this.fsQuad.render( renderer );\n  \n    } else {\n  \n    renderer.setRenderTarget( readBuffer );\n    this.fsQuad.render( renderer );\n  \n    }\n  \n    // Restore renderer settings\n  \n    renderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n    renderer.autoClear = oldAutoClear;\n  \n  },\n  \n  getSeperableBlurMaterial: function ( kernelRadius ) {\n  \n    return new THREE.ShaderMaterial( {\n  \n    defines: {\n      \"KERNEL_RADIUS\": kernelRadius,\n      \"SIGMA\": kernelRadius\n    },\n  \n    uniforms: {\n      \"colorTexture\": { value: null },\n      \"texSize\": { value: new THREE.Vector2( 0.5, 0.5 ) },\n      \"direction\": { value: new THREE.Vector2( 0.5, 0.5 ) }\n    },\n  \n    vertexShader:\n      \"letying vec2 vUv;\\n\\\n      void main() {\\n\\\n      vUv = uv;\\n\\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n      }\",\n  \n    fragmentShader:\n      \"#include <common>\\\n      letying vec2 vUv;\\n\\\n      uniform sampler2D colorTexture;\\n\\\n      uniform vec2 texSize;\\\n      uniform vec2 direction;\\\n      \\\n      float gaussianPdf(in float x, in float sigma) {\\\n      return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n      }\\\n      void main() {\\n\\\n      vec2 invSize = 1.0 / texSize;\\\n      float fSigma = float(SIGMA);\\\n      float weightSum = gaussianPdf(0.0, fSigma);\\\n      float alphaSum = 0.0;\\\n      vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n      for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n        float x = float(i);\\\n        float w = gaussianPdf(x, fSigma);\\\n        vec2 uvOffset = direction * invSize * x;\\\n        vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\n        vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\n        diffuseSum += (sample1.rgb + sample2.rgb) * w;\\\n        alphaSum += (sample1.a + sample2.a) * w;\\\n        weightSum += 2.0 * w;\\\n      }\\\n      gl_FragColor = vec4(diffuseSum/weightSum, alphaSum/weightSum);\\n\\\n      }\"\n    } );\n  \n  },\n  \n  getCompositeMaterial: function ( nMips ) {\n  \n    return new THREE.ShaderMaterial( {\n  \n    defines: {\n      \"NUM_MIPS\": nMips\n    },\n  \n    uniforms: {\n      \"blurTexture1\": { value: null },\n      \"blurTexture2\": { value: null },\n      \"blurTexture3\": { value: null },\n      \"blurTexture4\": { value: null },\n      \"blurTexture5\": { value: null },\n      \"dirtTexture\": { value: null },\n      \"bloomStrength\": { value: 1.0 },\n      \"bloomFactors\": { value: null },\n      \"bloomTintColors\": { value: null },\n      \"bloomRadius\": { value: 0.0 }\n    },\n  \n    vertexShader:\n      \"letying vec2 vUv;\\n\\\n      void main() {\\n\\\n      vUv = uv;\\n\\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n      }\",\n  \n    fragmentShader:\n      \"letying vec2 vUv;\\\n      uniform sampler2D blurTexture1;\\\n      uniform sampler2D blurTexture2;\\\n      uniform sampler2D blurTexture3;\\\n      uniform sampler2D blurTexture4;\\\n      uniform sampler2D blurTexture5;\\\n      uniform sampler2D dirtTexture;\\\n      uniform float bloomStrength;\\\n      uniform float bloomRadius;\\\n      uniform float bloomFactors[NUM_MIPS];\\\n      uniform vec3 bloomTintColors[NUM_MIPS];\\\n      \\\n      float lerpBloomFactor(const in float factor) { \\\n      float mirrorFactor = 1.2 - factor;\\\n      return mix(factor, mirrorFactor, bloomRadius);\\\n      }\\\n      \\\n      void main() {\\\n      gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n               lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n               lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n               lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n               lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n      }\"\n    } );\n  \n  }\n  \n  } );\n  \n  THREE.UnrealBloomPass.BlurDirectionX = new THREE.Vector2( 1.0, 0.0 );\n  THREE.UnrealBloomPass.BlurDirectionY = new THREE.Vector2( 0.0, 1.0 );\n\n  let UnrealBloomPass = THREE.UnrealBloomPass;\n  export default UnrealBloomPass;"]}]}